name: Build AllMusic 1.21.7 Fabric

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ROOT_DIR: /home/runner/work/AllMusic_Client/AllMusic_Client
      # 使用经过验证的兼容版本组合
      GRADLE_VERSION: "8.5"  # 与Loom 1.6.5完全兼容的版本
      LOOM_VERSION: "1.6.5"
      YARN_VERSION: "1.21.7+build.15"

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 验证工作目录
        run: |
          echo "当前目录: $(pwd)"
          if [ "$(pwd)" != "${{ env.ROOT_DIR }}" ]; then
              echo "错误：工作目录不匹配"
              exit 1
          fi

      - name: 清理旧文件和缓存
        run: |
          rm -rf .gradle/ gradle/ gradlew*
          rm -f settings.gradle build.gradle gradle.properties
          rm -rf ~/.gradle/caches/

      - name: 配置Java 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: 安装兼容版本的Gradle (8.5)
        run: |
          wget https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-bin.zip -O gradle.zip
          unzip -q gradle.zip
          export GRADLE_HOME=$(pwd)/gradle-${{ env.GRADLE_VERSION }}
          export PATH=$GRADLE_HOME/bin:$PATH
          gradle --version

      - name: 创建兼容的Gradle配置文件
        run: |
          cd ${{ env.ROOT_DIR }}
          
          # 创建settings.gradle（限制插件版本）
          cat > settings.gradle << 'EOF'
          pluginManagement {
              repositories {
                  maven { url "https://maven.fabricmc.net/" }
                  gradlePluginPortal()
              }
              plugins {
                  id 'fabric-loom' version '1.6.5' apply false
              }
          }
          rootProject.name = "allmusic-client"
          EOF

          # 创建build.gradle（移除问题特性）
          cat > build.gradle << 'EOF'
          plugins {
              id 'fabric-loom'
              id 'maven-publish'
          }

          repositories {
              maven { url "https://maven.fabricmc.net/" }
              mavenCentral()
          }

          version = project.mod_version
          group = project.maven_group

          dependencies {
              minecraft "com.mojang:minecraft:${minecraft_version}"
              mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
              modImplementation "net.fabricmc:fabric-loader:${loader_version}"
              modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
          }

          tasks.withType(JavaCompile).configureEach {
              options.release = 21
              options.encoding = "UTF-8"
          }

          // 简化Loom配置，避免使用问题API
          loom {
              runs {
                  client {
                      client()
                      configName = "Client"
                  }
                  server {
                      server()
                      configName = "Server"
                  }
              }
          }
          EOF

          # 创建gradle.properties
          cat > gradle.properties << 'EOF'
          minecraft_version=1.21.7
          yarn_mappings=1.21.7+build.15
          loader_version=0.16.15
          fabric_version=0.110.1+1.21.7
          mod_version=3.0.7
          maven_group=com.coloryr
          archives_base_name=allmusic-client
          EOF

          # 验证文件创建
          ls -la *.gradle
          cat settings.gradle

      - name: 生成Gradle Wrapper
        run: |
          cd ${{ env.ROOT_DIR }}
          gradle wrapper \
            --gradle-version ${{ env.GRADLE_VERSION }} \
            --distribution-type bin \
            --no-daemon
          chmod +x gradlew

      - name: 执行构建（禁用问题特性）
        run: |
          cd ${{ env.ROOT_DIR }}
          # 添加参数禁用Gradle 8.5+的问题报告特性
          ./gradlew clean build --stacktrace -Porg.gradle.problems.throw-uncaught=true

      - name: 上传产物
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: allmusic-build
          path: ${{ env.ROOT_DIR }}/build/libs/*.jar

      - name: 上传错误日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-errors
          path: |
            ${{ env.ROOT_DIR }}/build/reports/**/*
            ${{ env.ROOT_DIR }}/.gradle/**/*
