name: Build AllMusic 1.21.7 Fabric

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        # 强制所有命令在项目根目录执行（关键修复）
        working-directory: .

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 显示工作目录结构（调试用）
        run: |
          echo "当前目录: $(pwd)"
          ls -la
          echo "-------------------------"
          echo "是否存在src目录: $(ls -d src 2>/dev/null || echo '不存在')"

      - name: 清理旧缓存
        run: |
          rm -rf ~/.gradle/caches/
          rm -rf .gradle/
          rm -f gradlew*

      - name: 配置Java 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: 手动安装Gradle并生成Wrapper（关键步骤）
        run: |
          # 下载并解压Gradle 8.7
          wget https://services.gradle.org/distributions/gradle-8.7-bin.zip -O gradle.zip
          unzip -q gradle.zip
          export GRADLE_HOME=$(pwd)/gradle-8.7
          export PATH=$GRADLE_HOME/bin:$PATH
          
          # 验证Gradle安装
          gradle --version || { echo "Gradle安装失败"; exit 1; }
          
          # 生成Wrapper（指定输出目录为当前目录）
          gradle wrapper \
            --gradle-version 8.7 \
            --distribution-type bin \
            --no-daemon
          
          # 验证Wrapper文件是否生成
          if [ ! -f "gradlew" ]; then
              echo "错误：未生成gradlew文件"
              ls -la
              exit 1
          fi
          chmod +x gradlew
          echo "Wrapper生成成功"

      - name: 创建必要的Gradle配置文件
        run: |
          # 创建settings.gradle
          cat > settings.gradle << 'EOF'
          pluginManagement {
              repositories {
                  maven { url "https://maven.fabricmc.net/" }
                  gradlePluginPortal()
              }
          }
          rootProject.name = "allmusic-client"
          EOF

          # 创建build.gradle
          cat > build.gradle << 'EOF'
          plugins {
              id 'fabric-loom' version '1.6.5'
              id 'maven-publish'
          }

          repositories {
              maven { url "https://maven.fabricmc.net/" }
              mavenCentral()
          }

          version = project.mod_version
          group = project.maven_group

          dependencies {
              minecraft "com.mojang:minecraft:${minecraft_version}"
              mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
              modImplementation "net.fabricmc:fabric-loader:${loader_version}"
              modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
          }

          tasks.withType(JavaCompile).configureEach {
              options.release = 21
              options.encoding = "UTF-8"
          }

          loom {
              remapJar { enabled = true }
          }
          EOF

          # 创建gradle.properties
          cat > gradle.properties << 'EOF'
          minecraft_version=1.21.7
          yarn_mappings=1.21.7+build.15
          loader_version=0.16.15
          fabric_version=0.110.1+1.21.7
          mod_version=3.0.7
          maven_group=com.coloryr
          archives_base_name=allmusic-client
          EOF

          # 验证配置文件是否创建
          ls -la *.gradle
          ls -la gradle.properties

      - name: 执行构建
        run: |
          ./gradlew clean build --stacktrace --info

      - name: 上传构建产物
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: allmusic-build
          path: |
            build/libs/*.jar
            build/libs/*.zip

      - name: 上传错误日志（修复路径格式）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-errors
          path: |
            build/reports/**/*
            .gradle/**/*
            ~/.gradle/caches/**/*
          retention-days: 5
